// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/ahashim/web-server/ent/pool"
	"github.com/ahashim/web-server/ent/squeak"
	"github.com/ahashim/web-server/types"
)

// Pool is the model entity for the Pool schema.
type Pool struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount *types.Uint256 `json:"amount,omitempty"`
	// Shares holds the value of the "shares" field.
	Shares *types.Uint256 `json:"shares,omitempty"`
	// BlockNumber holds the value of the "block_number" field.
	BlockNumber *types.Uint256 `json:"block_number,omitempty"`
	// Score holds the value of the "score" field.
	Score int `json:"score,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PoolQuery when eager-loading is set.
	Edges       PoolEdges `json:"edges"`
	squeak_pool *int
}

// PoolEdges holds the relations/edges for other nodes in the graph.
type PoolEdges struct {
	// PoolPasses holds the value of the pool_passes edge.
	PoolPasses []*PoolPass `json:"pool_passes,omitempty"`
	// Squeak holds the value of the squeak edge.
	Squeak *Squeak `json:"squeak,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PoolPassesOrErr returns the PoolPasses value or an error if the edge
// was not loaded in eager-loading.
func (e PoolEdges) PoolPassesOrErr() ([]*PoolPass, error) {
	if e.loadedTypes[0] {
		return e.PoolPasses, nil
	}
	return nil, &NotLoadedError{edge: "pool_passes"}
}

// SqueakOrErr returns the Squeak value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PoolEdges) SqueakOrErr() (*Squeak, error) {
	if e.loadedTypes[1] {
		if e.Squeak == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: squeak.Label}
		}
		return e.Squeak, nil
	}
	return nil, &NotLoadedError{edge: "squeak"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Pool) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pool.FieldID, pool.FieldScore:
			values[i] = new(sql.NullInt64)
		case pool.FieldAmount, pool.FieldShares, pool.FieldBlockNumber:
			values[i] = new(types.Uint256)
		case pool.ForeignKeys[0]: // squeak_pool
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Pool", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Pool fields.
func (po *Pool) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pool.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			po.ID = int(value.Int64)
		case pool.FieldAmount:
			if value, ok := values[i].(*types.Uint256); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				po.Amount = value
			}
		case pool.FieldShares:
			if value, ok := values[i].(*types.Uint256); !ok {
				return fmt.Errorf("unexpected type %T for field shares", values[i])
			} else if value != nil {
				po.Shares = value
			}
		case pool.FieldBlockNumber:
			if value, ok := values[i].(*types.Uint256); !ok {
				return fmt.Errorf("unexpected type %T for field block_number", values[i])
			} else if value != nil {
				po.BlockNumber = value
			}
		case pool.FieldScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				po.Score = int(value.Int64)
			}
		case pool.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field squeak_pool", value)
			} else if value.Valid {
				po.squeak_pool = new(int)
				*po.squeak_pool = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryPoolPasses queries the "pool_passes" edge of the Pool entity.
func (po *Pool) QueryPoolPasses() *PoolPassQuery {
	return (&PoolClient{config: po.config}).QueryPoolPasses(po)
}

// QuerySqueak queries the "squeak" edge of the Pool entity.
func (po *Pool) QuerySqueak() *SqueakQuery {
	return (&PoolClient{config: po.config}).QuerySqueak(po)
}

// Update returns a builder for updating this Pool.
// Note that you need to call Pool.Unwrap() before calling this method if this Pool
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Pool) Update() *PoolUpdateOne {
	return (&PoolClient{config: po.config}).UpdateOne(po)
}

// Unwrap unwraps the Pool entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Pool) Unwrap() *Pool {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Pool is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Pool) String() string {
	var builder strings.Builder
	builder.WriteString("Pool(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", po.Amount))
	builder.WriteString(", ")
	builder.WriteString("shares=")
	builder.WriteString(fmt.Sprintf("%v", po.Shares))
	builder.WriteString(", ")
	builder.WriteString("block_number=")
	builder.WriteString(fmt.Sprintf("%v", po.BlockNumber))
	builder.WriteString(", ")
	builder.WriteString("score=")
	builder.WriteString(fmt.Sprintf("%v", po.Score))
	builder.WriteByte(')')
	return builder.String()
}

// Pools is a parsable slice of Pool.
type Pools []*Pool

func (po Pools) config(cfg config) {
	for _i := range po {
		po[_i].config = cfg
	}
}
