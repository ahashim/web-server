// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/ahashim/web-server/ent/interaction"
	"github.com/ahashim/web-server/ent/squeak"
	"github.com/ahashim/web-server/ent/user"
	"github.com/ahashim/web-server/enums"
)

// Interaction is the model entity for the Interaction schema.
type Interaction struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type enums.Interaction `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InteractionQuery when eager-loading is set.
	Edges               InteractionEdges `json:"edges"`
	squeak_interactions *int
	user_interactions   *int
}

// InteractionEdges holds the relations/edges for other nodes in the graph.
type InteractionEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Squeak holds the value of the squeak edge.
	Squeak *Squeak `json:"squeak,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InteractionEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// SqueakOrErr returns the Squeak value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InteractionEdges) SqueakOrErr() (*Squeak, error) {
	if e.loadedTypes[1] {
		if e.Squeak == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: squeak.Label}
		}
		return e.Squeak, nil
	}
	return nil, &NotLoadedError{edge: "squeak"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Interaction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case interaction.FieldType:
			values[i] = new(enums.Interaction)
		case interaction.FieldID:
			values[i] = new(sql.NullInt64)
		case interaction.ForeignKeys[0]: // squeak_interactions
			values[i] = new(sql.NullInt64)
		case interaction.ForeignKeys[1]: // user_interactions
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Interaction", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Interaction fields.
func (i *Interaction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case interaction.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case interaction.FieldType:
			if value, ok := values[j].(*enums.Interaction); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[j])
			} else if value != nil {
				i.Type = *value
			}
		case interaction.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field squeak_interactions", value)
			} else if value.Valid {
				i.squeak_interactions = new(int)
				*i.squeak_interactions = int(value.Int64)
			}
		case interaction.ForeignKeys[1]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_interactions", value)
			} else if value.Valid {
				i.user_interactions = new(int)
				*i.user_interactions = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Interaction entity.
func (i *Interaction) QueryUser() *UserQuery {
	return (&InteractionClient{config: i.config}).QueryUser(i)
}

// QuerySqueak queries the "squeak" edge of the Interaction entity.
func (i *Interaction) QuerySqueak() *SqueakQuery {
	return (&InteractionClient{config: i.config}).QuerySqueak(i)
}

// Update returns a builder for updating this Interaction.
// Note that you need to call Interaction.Unwrap() before calling this method if this Interaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Interaction) Update() *InteractionUpdateOne {
	return (&InteractionClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the Interaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Interaction) Unwrap() *Interaction {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Interaction is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Interaction) String() string {
	var builder strings.Builder
	builder.WriteString("Interaction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", i.Type))
	builder.WriteByte(')')
	return builder.String()
}

// Interactions is a parsable slice of Interaction.
type Interactions []*Interaction

func (i Interactions) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
