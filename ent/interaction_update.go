// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ahashim/web-server/ent/interaction"
	"github.com/ahashim/web-server/ent/predicate"
	"github.com/ahashim/web-server/ent/squeak"
	"github.com/ahashim/web-server/ent/user"
	"github.com/ahashim/web-server/enums"
)

// InteractionUpdate is the builder for updating Interaction entities.
type InteractionUpdate struct {
	config
	hooks    []Hook
	mutation *InteractionMutation
}

// Where appends a list predicates to the InteractionUpdate builder.
func (iu *InteractionUpdate) Where(ps ...predicate.Interaction) *InteractionUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetType sets the "type" field.
func (iu *InteractionUpdate) SetType(e enums.Interaction) *InteractionUpdate {
	iu.mutation.SetType(e)
	return iu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (iu *InteractionUpdate) SetUserID(id int) *InteractionUpdate {
	iu.mutation.SetUserID(id)
	return iu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (iu *InteractionUpdate) SetNillableUserID(id *int) *InteractionUpdate {
	if id != nil {
		iu = iu.SetUserID(*id)
	}
	return iu
}

// SetUser sets the "user" edge to the User entity.
func (iu *InteractionUpdate) SetUser(u *User) *InteractionUpdate {
	return iu.SetUserID(u.ID)
}

// SetSqueakID sets the "squeak" edge to the Squeak entity by ID.
func (iu *InteractionUpdate) SetSqueakID(id int) *InteractionUpdate {
	iu.mutation.SetSqueakID(id)
	return iu
}

// SetNillableSqueakID sets the "squeak" edge to the Squeak entity by ID if the given value is not nil.
func (iu *InteractionUpdate) SetNillableSqueakID(id *int) *InteractionUpdate {
	if id != nil {
		iu = iu.SetSqueakID(*id)
	}
	return iu
}

// SetSqueak sets the "squeak" edge to the Squeak entity.
func (iu *InteractionUpdate) SetSqueak(s *Squeak) *InteractionUpdate {
	return iu.SetSqueakID(s.ID)
}

// Mutation returns the InteractionMutation object of the builder.
func (iu *InteractionUpdate) Mutation() *InteractionMutation {
	return iu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (iu *InteractionUpdate) ClearUser() *InteractionUpdate {
	iu.mutation.ClearUser()
	return iu
}

// ClearSqueak clears the "squeak" edge to the Squeak entity.
func (iu *InteractionUpdate) ClearSqueak() *InteractionUpdate {
	iu.mutation.ClearSqueak()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InteractionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(iu.hooks) == 0 {
		if err = iu.check(); err != nil {
			return 0, err
		}
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InteractionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iu.check(); err != nil {
				return 0, err
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			if iu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InteractionUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InteractionUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InteractionUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *InteractionUpdate) check() error {
	if v, ok := iu.mutation.GetType(); ok {
		if err := interaction.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Interaction.type": %w`, err)}
		}
	}
	return nil
}

func (iu *InteractionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   interaction.Table,
			Columns: interaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: interaction.FieldID,
			},
		},
	}
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: interaction.FieldType,
		})
	}
	if iu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interaction.UserTable,
			Columns: []string{interaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interaction.UserTable,
			Columns: []string{interaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.SqueakCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interaction.SqueakTable,
			Columns: []string{interaction.SqueakColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: squeak.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.SqueakIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interaction.SqueakTable,
			Columns: []string{interaction.SqueakColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: squeak.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{interaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// InteractionUpdateOne is the builder for updating a single Interaction entity.
type InteractionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InteractionMutation
}

// SetType sets the "type" field.
func (iuo *InteractionUpdateOne) SetType(e enums.Interaction) *InteractionUpdateOne {
	iuo.mutation.SetType(e)
	return iuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (iuo *InteractionUpdateOne) SetUserID(id int) *InteractionUpdateOne {
	iuo.mutation.SetUserID(id)
	return iuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (iuo *InteractionUpdateOne) SetNillableUserID(id *int) *InteractionUpdateOne {
	if id != nil {
		iuo = iuo.SetUserID(*id)
	}
	return iuo
}

// SetUser sets the "user" edge to the User entity.
func (iuo *InteractionUpdateOne) SetUser(u *User) *InteractionUpdateOne {
	return iuo.SetUserID(u.ID)
}

// SetSqueakID sets the "squeak" edge to the Squeak entity by ID.
func (iuo *InteractionUpdateOne) SetSqueakID(id int) *InteractionUpdateOne {
	iuo.mutation.SetSqueakID(id)
	return iuo
}

// SetNillableSqueakID sets the "squeak" edge to the Squeak entity by ID if the given value is not nil.
func (iuo *InteractionUpdateOne) SetNillableSqueakID(id *int) *InteractionUpdateOne {
	if id != nil {
		iuo = iuo.SetSqueakID(*id)
	}
	return iuo
}

// SetSqueak sets the "squeak" edge to the Squeak entity.
func (iuo *InteractionUpdateOne) SetSqueak(s *Squeak) *InteractionUpdateOne {
	return iuo.SetSqueakID(s.ID)
}

// Mutation returns the InteractionMutation object of the builder.
func (iuo *InteractionUpdateOne) Mutation() *InteractionMutation {
	return iuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (iuo *InteractionUpdateOne) ClearUser() *InteractionUpdateOne {
	iuo.mutation.ClearUser()
	return iuo
}

// ClearSqueak clears the "squeak" edge to the Squeak entity.
func (iuo *InteractionUpdateOne) ClearSqueak() *InteractionUpdateOne {
	iuo.mutation.ClearSqueak()
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InteractionUpdateOne) Select(field string, fields ...string) *InteractionUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Interaction entity.
func (iuo *InteractionUpdateOne) Save(ctx context.Context) (*Interaction, error) {
	var (
		err  error
		node *Interaction
	)
	if len(iuo.hooks) == 0 {
		if err = iuo.check(); err != nil {
			return nil, err
		}
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InteractionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iuo.check(); err != nil {
				return nil, err
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			if iuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, iuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Interaction)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from InteractionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InteractionUpdateOne) SaveX(ctx context.Context) *Interaction {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InteractionUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InteractionUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *InteractionUpdateOne) check() error {
	if v, ok := iuo.mutation.GetType(); ok {
		if err := interaction.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Interaction.type": %w`, err)}
		}
	}
	return nil
}

func (iuo *InteractionUpdateOne) sqlSave(ctx context.Context) (_node *Interaction, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   interaction.Table,
			Columns: interaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: interaction.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Interaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, interaction.FieldID)
		for _, f := range fields {
			if !interaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != interaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: interaction.FieldType,
		})
	}
	if iuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interaction.UserTable,
			Columns: []string{interaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interaction.UserTable,
			Columns: []string{interaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.SqueakCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interaction.SqueakTable,
			Columns: []string{interaction.SqueakColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: squeak.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.SqueakIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interaction.SqueakTable,
			Columns: []string{interaction.SqueakColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: squeak.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Interaction{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{interaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
