// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/ahashim/web-server/ent/role"
	"github.com/ahashim/web-server/ent/schema"
	"github.com/ahashim/web-server/ent/squeak"
	"github.com/ahashim/web-server/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	roleFields := schema.Role{}.Fields()
	_ = roleFields
	// roleDescTitle is the schema descriptor for title field.
	roleDescTitle := roleFields[0].Descriptor()
	// role.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	role.TitleValidator = roleDescTitle.Validators[0].(func(string) error)
	// roleDescHash is the schema descriptor for hash field.
	roleDescHash := roleFields[1].Descriptor()
	// role.HashValidator is a validator for the "hash" field. It is called by the builders before save.
	role.HashValidator = func() func(string) error {
		validators := roleDescHash.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(hash string) error {
			for _, fn := range fns {
				if err := fn(hash); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	squeakFields := schema.Squeak{}.Fields()
	_ = squeakFields
	// squeakDescContent is the schema descriptor for content field.
	squeakDescContent := squeakFields[1].Descriptor()
	// squeak.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	squeak.ContentValidator = func() func(string) error {
		validators := squeakDescContent.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(content string) error {
			for _, fn := range fns {
				if err := fn(content); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescAddress is the schema descriptor for address field.
	userDescAddress := userFields[0].Descriptor()
	// user.AddressValidator is a validator for the "address" field. It is called by the builders before save.
	user.AddressValidator = func() func(string) error {
		validators := userDescAddress.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(address string) error {
			for _, fn := range fns {
				if err := fn(address); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[1].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = func() func(string) error {
		validators := userDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescLevel is the schema descriptor for level field.
	userDescLevel := userFields[3].Descriptor()
	// user.DefaultLevel holds the default value on creation for the level field.
	user.DefaultLevel = userDescLevel.Default.(int8)
}
