// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ahashim/web-server/ent/pool"
	"github.com/ahashim/web-server/ent/poolpass"
	"github.com/ahashim/web-server/ent/squeak"
	"github.com/ahashim/web-server/types"
)

// PoolCreate is the builder for creating a Pool entity.
type PoolCreate struct {
	config
	mutation *PoolMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (pc *PoolCreate) SetCreateTime(t time.Time) *PoolCreate {
	pc.mutation.SetCreateTime(t)
	return pc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (pc *PoolCreate) SetNillableCreateTime(t *time.Time) *PoolCreate {
	if t != nil {
		pc.SetCreateTime(*t)
	}
	return pc
}

// SetUpdateTime sets the "update_time" field.
func (pc *PoolCreate) SetUpdateTime(t time.Time) *PoolCreate {
	pc.mutation.SetUpdateTime(t)
	return pc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (pc *PoolCreate) SetNillableUpdateTime(t *time.Time) *PoolCreate {
	if t != nil {
		pc.SetUpdateTime(*t)
	}
	return pc
}

// SetAmount sets the "amount" field.
func (pc *PoolCreate) SetAmount(t *types.Uint256) *PoolCreate {
	pc.mutation.SetAmount(t)
	return pc
}

// SetShares sets the "shares" field.
func (pc *PoolCreate) SetShares(t *types.Uint256) *PoolCreate {
	pc.mutation.SetShares(t)
	return pc
}

// SetBlockNumber sets the "block_number" field.
func (pc *PoolCreate) SetBlockNumber(t *types.Uint256) *PoolCreate {
	pc.mutation.SetBlockNumber(t)
	return pc
}

// SetScore sets the "score" field.
func (pc *PoolCreate) SetScore(i int) *PoolCreate {
	pc.mutation.SetScore(i)
	return pc
}

// AddPoolPassIDs adds the "pool_passes" edge to the PoolPass entity by IDs.
func (pc *PoolCreate) AddPoolPassIDs(ids ...int) *PoolCreate {
	pc.mutation.AddPoolPassIDs(ids...)
	return pc
}

// AddPoolPasses adds the "pool_passes" edges to the PoolPass entity.
func (pc *PoolCreate) AddPoolPasses(p ...*PoolPass) *PoolCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPoolPassIDs(ids...)
}

// SetSqueakID sets the "squeak" edge to the Squeak entity by ID.
func (pc *PoolCreate) SetSqueakID(id int) *PoolCreate {
	pc.mutation.SetSqueakID(id)
	return pc
}

// SetNillableSqueakID sets the "squeak" edge to the Squeak entity by ID if the given value is not nil.
func (pc *PoolCreate) SetNillableSqueakID(id *int) *PoolCreate {
	if id != nil {
		pc = pc.SetSqueakID(*id)
	}
	return pc
}

// SetSqueak sets the "squeak" edge to the Squeak entity.
func (pc *PoolCreate) SetSqueak(s *Squeak) *PoolCreate {
	return pc.SetSqueakID(s.ID)
}

// Mutation returns the PoolMutation object of the builder.
func (pc *PoolCreate) Mutation() *PoolMutation {
	return pc.mutation
}

// Save creates the Pool in the database.
func (pc *PoolCreate) Save(ctx context.Context) (*Pool, error) {
	var (
		err  error
		node *Pool
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PoolMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Pool)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PoolMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PoolCreate) SaveX(ctx context.Context) *Pool {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PoolCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PoolCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PoolCreate) defaults() {
	if _, ok := pc.mutation.CreateTime(); !ok {
		v := pool.DefaultCreateTime()
		pc.mutation.SetCreateTime(v)
	}
	if _, ok := pc.mutation.UpdateTime(); !ok {
		v := pool.DefaultUpdateTime()
		pc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PoolCreate) check() error {
	if _, ok := pc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Pool.create_time"`)}
	}
	if _, ok := pc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Pool.update_time"`)}
	}
	if _, ok := pc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Pool.amount"`)}
	}
	if _, ok := pc.mutation.Shares(); !ok {
		return &ValidationError{Name: "shares", err: errors.New(`ent: missing required field "Pool.shares"`)}
	}
	if _, ok := pc.mutation.BlockNumber(); !ok {
		return &ValidationError{Name: "block_number", err: errors.New(`ent: missing required field "Pool.block_number"`)}
	}
	if _, ok := pc.mutation.Score(); !ok {
		return &ValidationError{Name: "score", err: errors.New(`ent: missing required field "Pool.score"`)}
	}
	return nil
}

func (pc *PoolCreate) sqlSave(ctx context.Context) (*Pool, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *PoolCreate) createSpec() (*Pool, *sqlgraph.CreateSpec) {
	var (
		_node = &Pool{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pool.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pool.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.CreateTime(); ok {
		_spec.SetField(pool.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := pc.mutation.UpdateTime(); ok {
		_spec.SetField(pool.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := pc.mutation.Amount(); ok {
		_spec.SetField(pool.FieldAmount, field.TypeInt, value)
		_node.Amount = value
	}
	if value, ok := pc.mutation.Shares(); ok {
		_spec.SetField(pool.FieldShares, field.TypeInt, value)
		_node.Shares = value
	}
	if value, ok := pc.mutation.BlockNumber(); ok {
		_spec.SetField(pool.FieldBlockNumber, field.TypeInt, value)
		_node.BlockNumber = value
	}
	if value, ok := pc.mutation.Score(); ok {
		_spec.SetField(pool.FieldScore, field.TypeInt, value)
		_node.Score = value
	}
	if nodes := pc.mutation.PoolPassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pool.PoolPassesTable,
			Columns: []string{pool.PoolPassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: poolpass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.SqueakIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   pool.SqueakTable,
			Columns: []string{pool.SqueakColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: squeak.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.squeak_pool = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PoolCreateBulk is the builder for creating many Pool entities in bulk.
type PoolCreateBulk struct {
	config
	builders []*PoolCreate
}

// Save creates the Pool entities in the database.
func (pcb *PoolCreateBulk) Save(ctx context.Context) ([]*Pool, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Pool, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PoolMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PoolCreateBulk) SaveX(ctx context.Context) []*Pool {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PoolCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PoolCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
