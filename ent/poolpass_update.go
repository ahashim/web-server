// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ahashim/web-server/ent/pool"
	"github.com/ahashim/web-server/ent/poolpass"
	"github.com/ahashim/web-server/ent/predicate"
	"github.com/ahashim/web-server/ent/user"
)

// PoolPassUpdate is the builder for updating PoolPass entities.
type PoolPassUpdate struct {
	config
	hooks    []Hook
	mutation *PoolPassMutation
}

// Where appends a list predicates to the PoolPassUpdate builder.
func (ppu *PoolPassUpdate) Where(ps ...predicate.PoolPass) *PoolPassUpdate {
	ppu.mutation.Where(ps...)
	return ppu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ppu *PoolPassUpdate) SetUserID(id int) *PoolPassUpdate {
	ppu.mutation.SetUserID(id)
	return ppu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ppu *PoolPassUpdate) SetNillableUserID(id *int) *PoolPassUpdate {
	if id != nil {
		ppu = ppu.SetUserID(*id)
	}
	return ppu
}

// SetUser sets the "user" edge to the User entity.
func (ppu *PoolPassUpdate) SetUser(u *User) *PoolPassUpdate {
	return ppu.SetUserID(u.ID)
}

// SetPoolID sets the "pool" edge to the Pool entity by ID.
func (ppu *PoolPassUpdate) SetPoolID(id int) *PoolPassUpdate {
	ppu.mutation.SetPoolID(id)
	return ppu
}

// SetNillablePoolID sets the "pool" edge to the Pool entity by ID if the given value is not nil.
func (ppu *PoolPassUpdate) SetNillablePoolID(id *int) *PoolPassUpdate {
	if id != nil {
		ppu = ppu.SetPoolID(*id)
	}
	return ppu
}

// SetPool sets the "pool" edge to the Pool entity.
func (ppu *PoolPassUpdate) SetPool(p *Pool) *PoolPassUpdate {
	return ppu.SetPoolID(p.ID)
}

// Mutation returns the PoolPassMutation object of the builder.
func (ppu *PoolPassUpdate) Mutation() *PoolPassMutation {
	return ppu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ppu *PoolPassUpdate) ClearUser() *PoolPassUpdate {
	ppu.mutation.ClearUser()
	return ppu
}

// ClearPool clears the "pool" edge to the Pool entity.
func (ppu *PoolPassUpdate) ClearPool() *PoolPassUpdate {
	ppu.mutation.ClearPool()
	return ppu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ppu *PoolPassUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ppu.hooks) == 0 {
		affected, err = ppu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PoolPassMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ppu.mutation = mutation
			affected, err = ppu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ppu.hooks) - 1; i >= 0; i-- {
			if ppu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ppu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ppu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ppu *PoolPassUpdate) SaveX(ctx context.Context) int {
	affected, err := ppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ppu *PoolPassUpdate) Exec(ctx context.Context) error {
	_, err := ppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppu *PoolPassUpdate) ExecX(ctx context.Context) {
	if err := ppu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ppu *PoolPassUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   poolpass.Table,
			Columns: poolpass.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: poolpass.FieldID,
			},
		},
	}
	if ps := ppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ppu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   poolpass.UserTable,
			Columns: []string{poolpass.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   poolpass.UserTable,
			Columns: []string{poolpass.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppu.mutation.PoolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   poolpass.PoolTable,
			Columns: []string{poolpass.PoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pool.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.PoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   poolpass.PoolTable,
			Columns: []string{poolpass.PoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pool.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{poolpass.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PoolPassUpdateOne is the builder for updating a single PoolPass entity.
type PoolPassUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PoolPassMutation
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ppuo *PoolPassUpdateOne) SetUserID(id int) *PoolPassUpdateOne {
	ppuo.mutation.SetUserID(id)
	return ppuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ppuo *PoolPassUpdateOne) SetNillableUserID(id *int) *PoolPassUpdateOne {
	if id != nil {
		ppuo = ppuo.SetUserID(*id)
	}
	return ppuo
}

// SetUser sets the "user" edge to the User entity.
func (ppuo *PoolPassUpdateOne) SetUser(u *User) *PoolPassUpdateOne {
	return ppuo.SetUserID(u.ID)
}

// SetPoolID sets the "pool" edge to the Pool entity by ID.
func (ppuo *PoolPassUpdateOne) SetPoolID(id int) *PoolPassUpdateOne {
	ppuo.mutation.SetPoolID(id)
	return ppuo
}

// SetNillablePoolID sets the "pool" edge to the Pool entity by ID if the given value is not nil.
func (ppuo *PoolPassUpdateOne) SetNillablePoolID(id *int) *PoolPassUpdateOne {
	if id != nil {
		ppuo = ppuo.SetPoolID(*id)
	}
	return ppuo
}

// SetPool sets the "pool" edge to the Pool entity.
func (ppuo *PoolPassUpdateOne) SetPool(p *Pool) *PoolPassUpdateOne {
	return ppuo.SetPoolID(p.ID)
}

// Mutation returns the PoolPassMutation object of the builder.
func (ppuo *PoolPassUpdateOne) Mutation() *PoolPassMutation {
	return ppuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ppuo *PoolPassUpdateOne) ClearUser() *PoolPassUpdateOne {
	ppuo.mutation.ClearUser()
	return ppuo
}

// ClearPool clears the "pool" edge to the Pool entity.
func (ppuo *PoolPassUpdateOne) ClearPool() *PoolPassUpdateOne {
	ppuo.mutation.ClearPool()
	return ppuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ppuo *PoolPassUpdateOne) Select(field string, fields ...string) *PoolPassUpdateOne {
	ppuo.fields = append([]string{field}, fields...)
	return ppuo
}

// Save executes the query and returns the updated PoolPass entity.
func (ppuo *PoolPassUpdateOne) Save(ctx context.Context) (*PoolPass, error) {
	var (
		err  error
		node *PoolPass
	)
	if len(ppuo.hooks) == 0 {
		node, err = ppuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PoolPassMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ppuo.mutation = mutation
			node, err = ppuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ppuo.hooks) - 1; i >= 0; i-- {
			if ppuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ppuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ppuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PoolPass)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PoolPassMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ppuo *PoolPassUpdateOne) SaveX(ctx context.Context) *PoolPass {
	node, err := ppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ppuo *PoolPassUpdateOne) Exec(ctx context.Context) error {
	_, err := ppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppuo *PoolPassUpdateOne) ExecX(ctx context.Context) {
	if err := ppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ppuo *PoolPassUpdateOne) sqlSave(ctx context.Context) (_node *PoolPass, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   poolpass.Table,
			Columns: poolpass.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: poolpass.FieldID,
			},
		},
	}
	id, ok := ppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PoolPass.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, poolpass.FieldID)
		for _, f := range fields {
			if !poolpass.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != poolpass.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ppuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   poolpass.UserTable,
			Columns: []string{poolpass.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   poolpass.UserTable,
			Columns: []string{poolpass.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppuo.mutation.PoolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   poolpass.PoolTable,
			Columns: []string{poolpass.PoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pool.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.PoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   poolpass.PoolTable,
			Columns: []string{poolpass.PoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pool.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PoolPass{config: ppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{poolpass.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
