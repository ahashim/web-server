// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ahashim/web-server/ent/pool"
	"github.com/ahashim/web-server/ent/poolpass"
	"github.com/ahashim/web-server/ent/user"
	"github.com/ahashim/web-server/types"
)

// PoolPass is the model entity for the PoolPass schema.
type PoolPass struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// Shares holds the value of the "shares" field.
	Shares *types.Uint256 `json:"shares,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PoolPassQuery when eager-loading is set.
	Edges            PoolPassEdges `json:"edges"`
	pool_pool_passes *int
	user_pool_passes *int
}

// PoolPassEdges holds the relations/edges for other nodes in the graph.
type PoolPassEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Pool holds the value of the pool edge.
	Pool *Pool `json:"pool,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PoolPassEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// PoolOrErr returns the Pool value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PoolPassEdges) PoolOrErr() (*Pool, error) {
	if e.loadedTypes[1] {
		if e.Pool == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: pool.Label}
		}
		return e.Pool, nil
	}
	return nil, &NotLoadedError{edge: "pool"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PoolPass) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case poolpass.FieldID:
			values[i] = new(sql.NullInt64)
		case poolpass.FieldCreateTime:
			values[i] = new(sql.NullTime)
		case poolpass.FieldShares:
			values[i] = new(types.Uint256)
		case poolpass.ForeignKeys[0]: // pool_pool_passes
			values[i] = new(sql.NullInt64)
		case poolpass.ForeignKeys[1]: // user_pool_passes
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PoolPass", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PoolPass fields.
func (pp *PoolPass) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case poolpass.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pp.ID = int(value.Int64)
		case poolpass.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pp.CreateTime = value.Time
			}
		case poolpass.FieldShares:
			if value, ok := values[i].(*types.Uint256); !ok {
				return fmt.Errorf("unexpected type %T for field shares", values[i])
			} else if value != nil {
				pp.Shares = value
			}
		case poolpass.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field pool_pool_passes", value)
			} else if value.Valid {
				pp.pool_pool_passes = new(int)
				*pp.pool_pool_passes = int(value.Int64)
			}
		case poolpass.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_pool_passes", value)
			} else if value.Valid {
				pp.user_pool_passes = new(int)
				*pp.user_pool_passes = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the PoolPass entity.
func (pp *PoolPass) QueryUser() *UserQuery {
	return (&PoolPassClient{config: pp.config}).QueryUser(pp)
}

// QueryPool queries the "pool" edge of the PoolPass entity.
func (pp *PoolPass) QueryPool() *PoolQuery {
	return (&PoolPassClient{config: pp.config}).QueryPool(pp)
}

// Update returns a builder for updating this PoolPass.
// Note that you need to call PoolPass.Unwrap() before calling this method if this PoolPass
// was returned from a transaction, and the transaction was committed or rolled back.
func (pp *PoolPass) Update() *PoolPassUpdateOne {
	return (&PoolPassClient{config: pp.config}).UpdateOne(pp)
}

// Unwrap unwraps the PoolPass entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pp *PoolPass) Unwrap() *PoolPass {
	_tx, ok := pp.config.driver.(*txDriver)
	if !ok {
		panic("ent: PoolPass is not a transactional entity")
	}
	pp.config.driver = _tx.drv
	return pp
}

// String implements the fmt.Stringer.
func (pp *PoolPass) String() string {
	var builder strings.Builder
	builder.WriteString("PoolPass(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pp.ID))
	builder.WriteString("create_time=")
	builder.WriteString(pp.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("shares=")
	builder.WriteString(fmt.Sprintf("%v", pp.Shares))
	builder.WriteByte(')')
	return builder.String()
}

// PoolPasses is a parsable slice of PoolPass.
type PoolPasses []*PoolPass

func (pp PoolPasses) config(cfg config) {
	for _i := range pp {
		pp[_i].config = cfg
	}
}
