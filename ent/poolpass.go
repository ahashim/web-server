// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/ahashim/web-server/ent/poolpass"
	"github.com/ahashim/web-server/types"
)

// PoolPass is the model entity for the PoolPass schema.
type PoolPass struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Shares holds the value of the "shares" field.
	Shares *types.Uint256 `json:"shares,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PoolPass) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case poolpass.FieldID:
			values[i] = new(sql.NullInt64)
		case poolpass.FieldShares:
			values[i] = new(types.Uint256)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PoolPass", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PoolPass fields.
func (pp *PoolPass) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case poolpass.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pp.ID = int(value.Int64)
		case poolpass.FieldShares:
			if value, ok := values[i].(*types.Uint256); !ok {
				return fmt.Errorf("unexpected type %T for field shares", values[i])
			} else if value != nil {
				pp.Shares = value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this PoolPass.
// Note that you need to call PoolPass.Unwrap() before calling this method if this PoolPass
// was returned from a transaction, and the transaction was committed or rolled back.
func (pp *PoolPass) Update() *PoolPassUpdateOne {
	return (&PoolPassClient{config: pp.config}).UpdateOne(pp)
}

// Unwrap unwraps the PoolPass entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pp *PoolPass) Unwrap() *PoolPass {
	_tx, ok := pp.config.driver.(*txDriver)
	if !ok {
		panic("ent: PoolPass is not a transactional entity")
	}
	pp.config.driver = _tx.drv
	return pp
}

// String implements the fmt.Stringer.
func (pp *PoolPass) String() string {
	var builder strings.Builder
	builder.WriteString("PoolPass(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pp.ID))
	builder.WriteString("shares=")
	builder.WriteString(fmt.Sprintf("%v", pp.Shares))
	builder.WriteByte(')')
	return builder.String()
}

// PoolPasses is a parsable slice of PoolPass.
type PoolPasses []*PoolPass

func (pp PoolPasses) config(cfg config) {
	for _i := range pp {
		pp[_i].config = cfg
	}
}
