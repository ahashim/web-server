// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ahashim/web-server/ent/interaction"
	"github.com/ahashim/web-server/ent/squeak"
	"github.com/ahashim/web-server/ent/user"
	"github.com/ahashim/web-server/enums"
)

// InteractionCreate is the builder for creating a Interaction entity.
type InteractionCreate struct {
	config
	mutation *InteractionMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (ic *InteractionCreate) SetType(e enums.Interaction) *InteractionCreate {
	ic.mutation.SetType(e)
	return ic
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ic *InteractionCreate) SetUserID(id int) *InteractionCreate {
	ic.mutation.SetUserID(id)
	return ic
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ic *InteractionCreate) SetNillableUserID(id *int) *InteractionCreate {
	if id != nil {
		ic = ic.SetUserID(*id)
	}
	return ic
}

// SetUser sets the "user" edge to the User entity.
func (ic *InteractionCreate) SetUser(u *User) *InteractionCreate {
	return ic.SetUserID(u.ID)
}

// SetSqueakID sets the "squeak" edge to the Squeak entity by ID.
func (ic *InteractionCreate) SetSqueakID(id int) *InteractionCreate {
	ic.mutation.SetSqueakID(id)
	return ic
}

// SetNillableSqueakID sets the "squeak" edge to the Squeak entity by ID if the given value is not nil.
func (ic *InteractionCreate) SetNillableSqueakID(id *int) *InteractionCreate {
	if id != nil {
		ic = ic.SetSqueakID(*id)
	}
	return ic
}

// SetSqueak sets the "squeak" edge to the Squeak entity.
func (ic *InteractionCreate) SetSqueak(s *Squeak) *InteractionCreate {
	return ic.SetSqueakID(s.ID)
}

// Mutation returns the InteractionMutation object of the builder.
func (ic *InteractionCreate) Mutation() *InteractionMutation {
	return ic.mutation
}

// Save creates the Interaction in the database.
func (ic *InteractionCreate) Save(ctx context.Context) (*Interaction, error) {
	var (
		err  error
		node *Interaction
	)
	if len(ic.hooks) == 0 {
		if err = ic.check(); err != nil {
			return nil, err
		}
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InteractionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ic.check(); err != nil {
				return nil, err
			}
			ic.mutation = mutation
			if node, err = ic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			if ic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Interaction)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from InteractionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InteractionCreate) SaveX(ctx context.Context) *Interaction {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InteractionCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InteractionCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InteractionCreate) check() error {
	if _, ok := ic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Interaction.type"`)}
	}
	if v, ok := ic.mutation.GetType(); ok {
		if err := interaction.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Interaction.type": %w`, err)}
		}
	}
	return nil
}

func (ic *InteractionCreate) sqlSave(ctx context.Context) (*Interaction, error) {
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ic *InteractionCreate) createSpec() (*Interaction, *sqlgraph.CreateSpec) {
	var (
		_node = &Interaction{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: interaction.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: interaction.FieldID,
			},
		}
	)
	if value, ok := ic.mutation.GetType(); ok {
		_spec.SetField(interaction.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if nodes := ic.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interaction.UserTable,
			Columns: []string{interaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_interactions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.SqueakIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interaction.SqueakTable,
			Columns: []string{interaction.SqueakColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: squeak.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.squeak_interactions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InteractionCreateBulk is the builder for creating many Interaction entities in bulk.
type InteractionCreateBulk struct {
	config
	builders []*InteractionCreate
}

// Save creates the Interaction entities in the database.
func (icb *InteractionCreateBulk) Save(ctx context.Context) ([]*Interaction, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Interaction, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InteractionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InteractionCreateBulk) SaveX(ctx context.Context) []*Interaction {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InteractionCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InteractionCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
