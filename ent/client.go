// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/ahashim/web-server/ent/migrate"

	"github.com/ahashim/web-server/ent/interaction"
	"github.com/ahashim/web-server/ent/role"
	"github.com/ahashim/web-server/ent/scout"
	"github.com/ahashim/web-server/ent/scoutpool"
	"github.com/ahashim/web-server/ent/squeak"
	"github.com/ahashim/web-server/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Interaction is the client for interacting with the Interaction builders.
	Interaction *InteractionClient
	// Role is the client for interacting with the Role builders.
	Role *RoleClient
	// Scout is the client for interacting with the Scout builders.
	Scout *ScoutClient
	// ScoutPool is the client for interacting with the ScoutPool builders.
	ScoutPool *ScoutPoolClient
	// Squeak is the client for interacting with the Squeak builders.
	Squeak *SqueakClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Interaction = NewInteractionClient(c.config)
	c.Role = NewRoleClient(c.config)
	c.Scout = NewScoutClient(c.config)
	c.ScoutPool = NewScoutPoolClient(c.config)
	c.Squeak = NewSqueakClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Interaction: NewInteractionClient(cfg),
		Role:        NewRoleClient(cfg),
		Scout:       NewScoutClient(cfg),
		ScoutPool:   NewScoutPoolClient(cfg),
		Squeak:      NewSqueakClient(cfg),
		User:        NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Interaction: NewInteractionClient(cfg),
		Role:        NewRoleClient(cfg),
		Scout:       NewScoutClient(cfg),
		ScoutPool:   NewScoutPoolClient(cfg),
		Squeak:      NewSqueakClient(cfg),
		User:        NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Interaction.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Interaction.Use(hooks...)
	c.Role.Use(hooks...)
	c.Scout.Use(hooks...)
	c.ScoutPool.Use(hooks...)
	c.Squeak.Use(hooks...)
	c.User.Use(hooks...)
}

// InteractionClient is a client for the Interaction schema.
type InteractionClient struct {
	config
}

// NewInteractionClient returns a client for the Interaction from the given config.
func NewInteractionClient(c config) *InteractionClient {
	return &InteractionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `interaction.Hooks(f(g(h())))`.
func (c *InteractionClient) Use(hooks ...Hook) {
	c.hooks.Interaction = append(c.hooks.Interaction, hooks...)
}

// Create returns a builder for creating a Interaction entity.
func (c *InteractionClient) Create() *InteractionCreate {
	mutation := newInteractionMutation(c.config, OpCreate)
	return &InteractionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Interaction entities.
func (c *InteractionClient) CreateBulk(builders ...*InteractionCreate) *InteractionCreateBulk {
	return &InteractionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Interaction.
func (c *InteractionClient) Update() *InteractionUpdate {
	mutation := newInteractionMutation(c.config, OpUpdate)
	return &InteractionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InteractionClient) UpdateOne(i *Interaction) *InteractionUpdateOne {
	mutation := newInteractionMutation(c.config, OpUpdateOne, withInteraction(i))
	return &InteractionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InteractionClient) UpdateOneID(id int) *InteractionUpdateOne {
	mutation := newInteractionMutation(c.config, OpUpdateOne, withInteractionID(id))
	return &InteractionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Interaction.
func (c *InteractionClient) Delete() *InteractionDelete {
	mutation := newInteractionMutation(c.config, OpDelete)
	return &InteractionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InteractionClient) DeleteOne(i *Interaction) *InteractionDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *InteractionClient) DeleteOneID(id int) *InteractionDeleteOne {
	builder := c.Delete().Where(interaction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InteractionDeleteOne{builder}
}

// Query returns a query builder for Interaction.
func (c *InteractionClient) Query() *InteractionQuery {
	return &InteractionQuery{
		config: c.config,
	}
}

// Get returns a Interaction entity by its id.
func (c *InteractionClient) Get(ctx context.Context, id int) (*Interaction, error) {
	return c.Query().Where(interaction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InteractionClient) GetX(ctx context.Context, id int) *Interaction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Interaction.
func (c *InteractionClient) QueryUser(i *Interaction) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(interaction.Table, interaction.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, interaction.UserTable, interaction.UserColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySqueak queries the squeak edge of a Interaction.
func (c *InteractionClient) QuerySqueak(i *Interaction) *SqueakQuery {
	query := &SqueakQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(interaction.Table, interaction.FieldID, id),
			sqlgraph.To(squeak.Table, squeak.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, interaction.SqueakTable, interaction.SqueakColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InteractionClient) Hooks() []Hook {
	return c.hooks.Interaction
}

// RoleClient is a client for the Role schema.
type RoleClient struct {
	config
}

// NewRoleClient returns a client for the Role from the given config.
func NewRoleClient(c config) *RoleClient {
	return &RoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `role.Hooks(f(g(h())))`.
func (c *RoleClient) Use(hooks ...Hook) {
	c.hooks.Role = append(c.hooks.Role, hooks...)
}

// Create returns a builder for creating a Role entity.
func (c *RoleClient) Create() *RoleCreate {
	mutation := newRoleMutation(c.config, OpCreate)
	return &RoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Role entities.
func (c *RoleClient) CreateBulk(builders ...*RoleCreate) *RoleCreateBulk {
	return &RoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Role.
func (c *RoleClient) Update() *RoleUpdate {
	mutation := newRoleMutation(c.config, OpUpdate)
	return &RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleClient) UpdateOne(r *Role) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRole(r))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleClient) UpdateOneID(id int) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRoleID(id))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Role.
func (c *RoleClient) Delete() *RoleDelete {
	mutation := newRoleMutation(c.config, OpDelete)
	return &RoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoleClient) DeleteOne(r *Role) *RoleDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *RoleClient) DeleteOneID(id int) *RoleDeleteOne {
	builder := c.Delete().Where(role.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoleDeleteOne{builder}
}

// Query returns a query builder for Role.
func (c *RoleClient) Query() *RoleQuery {
	return &RoleQuery{
		config: c.config,
	}
}

// Get returns a Role entity by its id.
func (c *RoleClient) Get(ctx context.Context, id int) (*Role, error) {
	return c.Query().Where(role.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleClient) GetX(ctx context.Context, id int) *Role {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Role.
func (c *RoleClient) QueryUsers(r *Role) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, role.UsersTable, role.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoleClient) Hooks() []Hook {
	return c.hooks.Role
}

// ScoutClient is a client for the Scout schema.
type ScoutClient struct {
	config
}

// NewScoutClient returns a client for the Scout from the given config.
func NewScoutClient(c config) *ScoutClient {
	return &ScoutClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `scout.Hooks(f(g(h())))`.
func (c *ScoutClient) Use(hooks ...Hook) {
	c.hooks.Scout = append(c.hooks.Scout, hooks...)
}

// Create returns a builder for creating a Scout entity.
func (c *ScoutClient) Create() *ScoutCreate {
	mutation := newScoutMutation(c.config, OpCreate)
	return &ScoutCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Scout entities.
func (c *ScoutClient) CreateBulk(builders ...*ScoutCreate) *ScoutCreateBulk {
	return &ScoutCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Scout.
func (c *ScoutClient) Update() *ScoutUpdate {
	mutation := newScoutMutation(c.config, OpUpdate)
	return &ScoutUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScoutClient) UpdateOne(s *Scout) *ScoutUpdateOne {
	mutation := newScoutMutation(c.config, OpUpdateOne, withScout(s))
	return &ScoutUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScoutClient) UpdateOneID(id int) *ScoutUpdateOne {
	mutation := newScoutMutation(c.config, OpUpdateOne, withScoutID(id))
	return &ScoutUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Scout.
func (c *ScoutClient) Delete() *ScoutDelete {
	mutation := newScoutMutation(c.config, OpDelete)
	return &ScoutDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ScoutClient) DeleteOne(s *Scout) *ScoutDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *ScoutClient) DeleteOneID(id int) *ScoutDeleteOne {
	builder := c.Delete().Where(scout.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScoutDeleteOne{builder}
}

// Query returns a query builder for Scout.
func (c *ScoutClient) Query() *ScoutQuery {
	return &ScoutQuery{
		config: c.config,
	}
}

// Get returns a Scout entity by its id.
func (c *ScoutClient) Get(ctx context.Context, id int) (*Scout, error) {
	return c.Query().Where(scout.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScoutClient) GetX(ctx context.Context, id int) *Scout {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ScoutClient) Hooks() []Hook {
	return c.hooks.Scout
}

// ScoutPoolClient is a client for the ScoutPool schema.
type ScoutPoolClient struct {
	config
}

// NewScoutPoolClient returns a client for the ScoutPool from the given config.
func NewScoutPoolClient(c config) *ScoutPoolClient {
	return &ScoutPoolClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `scoutpool.Hooks(f(g(h())))`.
func (c *ScoutPoolClient) Use(hooks ...Hook) {
	c.hooks.ScoutPool = append(c.hooks.ScoutPool, hooks...)
}

// Create returns a builder for creating a ScoutPool entity.
func (c *ScoutPoolClient) Create() *ScoutPoolCreate {
	mutation := newScoutPoolMutation(c.config, OpCreate)
	return &ScoutPoolCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ScoutPool entities.
func (c *ScoutPoolClient) CreateBulk(builders ...*ScoutPoolCreate) *ScoutPoolCreateBulk {
	return &ScoutPoolCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ScoutPool.
func (c *ScoutPoolClient) Update() *ScoutPoolUpdate {
	mutation := newScoutPoolMutation(c.config, OpUpdate)
	return &ScoutPoolUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScoutPoolClient) UpdateOne(sp *ScoutPool) *ScoutPoolUpdateOne {
	mutation := newScoutPoolMutation(c.config, OpUpdateOne, withScoutPool(sp))
	return &ScoutPoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScoutPoolClient) UpdateOneID(id int) *ScoutPoolUpdateOne {
	mutation := newScoutPoolMutation(c.config, OpUpdateOne, withScoutPoolID(id))
	return &ScoutPoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ScoutPool.
func (c *ScoutPoolClient) Delete() *ScoutPoolDelete {
	mutation := newScoutPoolMutation(c.config, OpDelete)
	return &ScoutPoolDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ScoutPoolClient) DeleteOne(sp *ScoutPool) *ScoutPoolDeleteOne {
	return c.DeleteOneID(sp.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *ScoutPoolClient) DeleteOneID(id int) *ScoutPoolDeleteOne {
	builder := c.Delete().Where(scoutpool.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScoutPoolDeleteOne{builder}
}

// Query returns a query builder for ScoutPool.
func (c *ScoutPoolClient) Query() *ScoutPoolQuery {
	return &ScoutPoolQuery{
		config: c.config,
	}
}

// Get returns a ScoutPool entity by its id.
func (c *ScoutPoolClient) Get(ctx context.Context, id int) (*ScoutPool, error) {
	return c.Query().Where(scoutpool.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScoutPoolClient) GetX(ctx context.Context, id int) *ScoutPool {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ScoutPoolClient) Hooks() []Hook {
	return c.hooks.ScoutPool
}

// SqueakClient is a client for the Squeak schema.
type SqueakClient struct {
	config
}

// NewSqueakClient returns a client for the Squeak from the given config.
func NewSqueakClient(c config) *SqueakClient {
	return &SqueakClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `squeak.Hooks(f(g(h())))`.
func (c *SqueakClient) Use(hooks ...Hook) {
	c.hooks.Squeak = append(c.hooks.Squeak, hooks...)
}

// Create returns a builder for creating a Squeak entity.
func (c *SqueakClient) Create() *SqueakCreate {
	mutation := newSqueakMutation(c.config, OpCreate)
	return &SqueakCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Squeak entities.
func (c *SqueakClient) CreateBulk(builders ...*SqueakCreate) *SqueakCreateBulk {
	return &SqueakCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Squeak.
func (c *SqueakClient) Update() *SqueakUpdate {
	mutation := newSqueakMutation(c.config, OpUpdate)
	return &SqueakUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SqueakClient) UpdateOne(s *Squeak) *SqueakUpdateOne {
	mutation := newSqueakMutation(c.config, OpUpdateOne, withSqueak(s))
	return &SqueakUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SqueakClient) UpdateOneID(id int) *SqueakUpdateOne {
	mutation := newSqueakMutation(c.config, OpUpdateOne, withSqueakID(id))
	return &SqueakUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Squeak.
func (c *SqueakClient) Delete() *SqueakDelete {
	mutation := newSqueakMutation(c.config, OpDelete)
	return &SqueakDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SqueakClient) DeleteOne(s *Squeak) *SqueakDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SqueakClient) DeleteOneID(id int) *SqueakDeleteOne {
	builder := c.Delete().Where(squeak.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SqueakDeleteOne{builder}
}

// Query returns a query builder for Squeak.
func (c *SqueakClient) Query() *SqueakQuery {
	return &SqueakQuery{
		config: c.config,
	}
}

// Get returns a Squeak entity by its id.
func (c *SqueakClient) Get(ctx context.Context, id int) (*Squeak, error) {
	return c.Query().Where(squeak.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SqueakClient) GetX(ctx context.Context, id int) *Squeak {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInteractions queries the interactions edge of a Squeak.
func (c *SqueakClient) QueryInteractions(s *Squeak) *InteractionQuery {
	query := &InteractionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(squeak.Table, squeak.FieldID, id),
			sqlgraph.To(interaction.Table, interaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, squeak.InteractionsTable, squeak.InteractionsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a Squeak.
func (c *SqueakClient) QueryCreator(s *Squeak) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(squeak.Table, squeak.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, squeak.CreatorTable, squeak.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwner queries the owner edge of a Squeak.
func (c *SqueakClient) QueryOwner(s *Squeak) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(squeak.Table, squeak.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, squeak.OwnerTable, squeak.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SqueakClient) Hooks() []Hook {
	return c.hooks.Squeak
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInteractions queries the interactions edge of a User.
func (c *UserClient) QueryInteractions(u *User) *InteractionQuery {
	query := &InteractionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(interaction.Table, interaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.InteractionsTable, user.InteractionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoles queries the roles edge of a User.
func (c *UserClient) QueryRoles(u *User) *RoleQuery {
	query := &RoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.RolesTable, user.RolesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreated queries the created edge of a User.
func (c *UserClient) QueryCreated(u *User) *SqueakQuery {
	query := &SqueakQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(squeak.Table, squeak.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CreatedTable, user.CreatedColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwned queries the owned edge of a User.
func (c *UserClient) QueryOwned(u *User) *SqueakQuery {
	query := &SqueakQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(squeak.Table, squeak.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.OwnedTable, user.OwnedColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFollowers queries the followers edge of a User.
func (c *UserClient) QueryFollowers(u *User) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.FollowersTable, user.FollowersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFollowing queries the following edge of a User.
func (c *UserClient) QueryFollowing(u *User) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.FollowingTable, user.FollowingPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
